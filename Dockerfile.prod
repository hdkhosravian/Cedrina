# Dockerfile for Cedrina staging and production
# Multi-stage build for security and optimization

# Stage 1: Builder - Install dependencies and compile translations
FROM python:3.12-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libc-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry==2.1.3

# Copy Poetry files
COPY pyproject.toml poetry.lock ./

# Install runtime dependencies
RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-root --without dev && \
    pip uninstall -y pytest pytest-asyncio pytest-cov pytest-dotenv httpx mypy ruff black pre-commit bandit types-python-jose types-passlib

# Copy and compile translations
COPY locales/ ./locales/
RUN pybabel compile -d locales -D messages

# Stage 2: Runtime - Optimized production image
FROM python:3.12-slim

# Metadata
LABEL maintainer="Architecture Team <architecture@example.com>"
LABEL version="1.0.0"
LABEL description="Cedrina - Enterprise-grade FastAPI application"

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    GUNICORN_TIMEOUT=120 \
    GUNICORN_LOG_LEVEL=info \
    APP_ENV=production

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    tini \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 appuser && \
    mkdir -p /app && \
    chown appuser:appuser /app

WORKDIR /app

# Copy dependencies and translations from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /app/locales/ /app/locales/

# Copy source code and configurations
COPY src/ ./src/
COPY alembic.ini ./alembic.ini
COPY alembic/ ./alembic/
COPY entrypoint.sh ./entrypoint.sh

# Precompile bytecode
RUN python -m compileall -b src/ && \
    chmod +x /app/entrypoint.sh && \
    chown appuser:appuser /app/entrypoint.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Entrypoint with tini
ENTRYPOINT ["/usr/bin/tini", "--"]

# Run application
CMD ["/app/entrypoint.sh"]